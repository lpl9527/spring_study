<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!--配置spring的IOC，配置service对象-->
    <bean id="accountService" class="com.lpl.service.impl.AccountServiceImpl"></bean>

    <!--
        spring中基于xml的AOP配置：
        概念：
            (Joinpoint)连接点：经过代理增强方法的方法是连接点。
            (Pointcut)切入点：被代理对象增强的方法为切入点。
            (Advice)通知/增强:拦截到joinpoint后要做的事情就是通知。包括前置通知、后置通知、异常通知、最终通知、环绕通知。
            (Target)目标对象：被代理对象。
            (Weaving)织入：是指把增强应用到目标对象来创建新的代理对象的过程。
            (Proxy)代理：一个类被AOP织入增强后，就产生一个结果代理类。
            (Aspect)切面：切入点和通知的结合。
        配置步骤：
            1.把通知（要动态代理增强）的Bean交给spring容器管理；
            2.使用aop:config标签开始AOP的配置；
            3.使用aop:aspect标签配置切面；
                id属性：给切面提供一个唯一标识。
                ref属性：指定通知类的Bean的Id。
                在标签内部配置通知类型：
                    aop:before：前置通知
                        method属性：用于指定要代理的类的哪个方法是前置通知。
                        pointcut属性：用于指定切入点表达式，定义对业务层中哪些方法进行增强。
                 切入点表达式写法：
                    execution(访问权限修饰符 返回值 包名.包名...类名.方法名(参数列表))
                    访问权限修饰符可以省略
                    全通配写法：
                        * *..*.*(..)
                    实际开发中切入点表达式的通常写法（切到业务层实现类下的所有方法）：
                        * com.lpl.service.impl.*.*(..)
    -->
    <!--1.配置Logger类-->
    <bean id="logger" class="com.lpl.utils.Logger"></bean>

    <!--配置AOP-->
    <aop:config>
        <!--配置切入点表达式，写入切面标签内部只能当前切面使用-->
        <aop:pointcut id="pe1" expression="execution(* com.lpl.service.impl.*.*(..))"/>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型，并且建立通知方法和切入点方法的关联-->
            <!--前置通知，在切入点方法执行之前执行-->
            <aop:before method="beforePrintLog" pointcut="execution(* com.lpl.service.impl.*.*(..))"></aop:before>
            <!--后置通知，在切入点方法正常执行之后执行-->
            <aop:after-returning method="afterPrintLog" pointcut-ref="pe1"></aop:after-returning>
            <!--异常通知，在切入点方法发生异常之后执行-->
            <aop:after-throwing method="exceptionPrintLog" pointcut-ref="pe1"></aop:after-throwing>
            <!--最终通知，不管怎样都会执行-->
            <aop:after method="finalPrintLog" pointcut-ref="pe1"></aop:after>

            <!--配置环绕通知-->
            <!--<aop:around method="aroundPrintLog" pointcut-ref="pe1"></aop:around>-->
        </aop:aspect>
    </aop:config>

</beans>